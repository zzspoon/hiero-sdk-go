//go:build all || unit || e2e || testnets
// +build all unit e2e testnets

package hiero

// SPDX-License-Identifier: Apache-2.0

import (
	"fmt"
	"os"
	"testing"
	"time"

	"github.com/stretchr/testify/assert"

	"github.com/stretchr/testify/require"
)

var mockPrivateKey string = "302e020100300506032b6570042204203b054fade7a2b0869c6bd4a63b7017cbae7855d12acc357bea718e2c3e805962"

var accountIDForTransactionID = AccountID{Account: 3}
var validStartForTransacionID = time.Unix(124124, 151515)

var testTransactionID TransactionID = TransactionID{
	AccountID:  &accountIDForTransactionID,
	ValidStart: &validStartForTransacionID,
}

const testClientJSON string = `{
    "network": {
		"35.237.200.180:50211": "0.0.3",
		"35.186.191.247:50211": "0.0.4",
		"35.192.2.25:50211": "0.0.5",
		"35.199.161.108:50211": "0.0.6",
		"35.203.82.240:50211": "0.0.7",
		"35.236.5.219:50211": "0.0.8",
		"35.197.192.225:50211": "0.0.9",
		"35.242.233.154:50211": "0.0.10",
		"35.240.118.96:50211": "0.0.11",
		"35.204.86.32:50211": "0.0.12"
    },
    "mirrorNetwork": "testnet"
}`

type IntegrationTestEnv struct {
	Client              *Client
	OperatorKey         PrivateKey
	OperatorID          AccountID
	OriginalOperatorKey PublicKey
	OriginalOperatorID  AccountID
	NodeAccountIDs      []AccountID
}

func NewIntegrationTestEnv(t *testing.T) IntegrationTestEnv {
	var env IntegrationTestEnv
	var err error

	if os.Getenv("HEDERA_NETWORK") == "previewnet" { // nolint
		env.Client = ClientForPreviewnet()
	} else if os.Getenv("HEDERA_NETWORK") == "localhost" {
		network := make(map[string]AccountID)
		network["127.0.0.1:50213"] = AccountID{Account: 3}
		mirror := []string{"127.0.0.1:5600"}
		env.Client = ClientForNetwork(network)
		env.Client.SetMirrorNetwork(mirror)
	} else if os.Getenv("HEDERA_NETWORK") == "testnet" {
		env.Client = ClientForTestnet()
	} else if os.Getenv("CONFIG_FILE") != "" {
		env.Client, err = ClientFromConfigFile(os.Getenv("CONFIG_FILE"))
	} else {
		err = fmt.Errorf("Failed to construct client from environment variables")
	}
	require.NoError(t, err)
	assert.NotNil(t, env.Client)

	configOperatorID := os.Getenv("OPERATOR_ID")
	configOperatorKey := os.Getenv("OPERATOR_KEY")

	if configOperatorID != "" && configOperatorKey != "" {
		env.OperatorID, err = AccountIDFromString(configOperatorID)
		require.NoError(t, err)

		env.OperatorKey, err = PrivateKeyFromString(configOperatorKey)
		require.NoError(t, err)

		env.Client.SetOperator(env.OperatorID, env.OperatorKey)
	}

	assert.NotNil(t, env.Client.GetOperatorAccountID())
	assert.NotNil(t, env.Client.GetOperatorPublicKey())

	env.Client.SetMaxNodeAttempts(1)
	env.Client.SetMinBackoff(250 * time.Millisecond)
	env.Client.SetMaxBackoff(8 * time.Second)
	env.Client.SetNodeMinReadmitPeriod(5 * time.Second)
	env.Client.SetNodeMaxReadmitPeriod(1 * time.Hour)
	env.Client.SetMaxAttempts(15)
	env.Client.SetDefaultMaxQueryPayment(NewHbar(50))
	logger := NewLogger("Hiero sdk", LoggerLevelError)
	env.Client.SetLogger(logger)

	env.OriginalOperatorID = env.Client.GetOperatorAccountID()
	env.OriginalOperatorKey = env.Client.GetOperatorPublicKey()

	env.Client.SetOperator(env.OperatorID, env.OperatorKey)
	env.NodeAccountIDs = env.Client.network._GetNodeAccountIDsForExecute()
	return env
}

func CloseIntegrationTestEnv(env IntegrationTestEnv, token *TokenID) error {
	var resp TransactionResponse
	if token != nil {
		deleteTokenTx, err := NewTokenDeleteTransaction().
			SetNodeAccountIDs(env.NodeAccountIDs).
			SetTokenID(*token).
			FreezeWith(env.Client)
		if err != nil {
			return err
		}

		resp, err = deleteTokenTx.
			Sign(env.OperatorKey).
			Execute(env.Client)
		if err != nil {
			return err
		}

		_, err = resp.SetValidateStatus(true).GetReceipt(env.Client)
		if err != nil {
			return err
		}

		// Check if env.Client.operator is nil
		if env.Client.operator == nil {
			return fmt.Errorf("client operator is nil")
		}

		// This is needed, because we can't delete the account while still having tokens.
		// This works only, because the token is deleted, otherwise the acount would need to have 0 balance of it before dissociating.
		dissociateTx, err := NewTokenDissociateTransaction().
			SetAccountID(env.Client.operator.accountID).
			SetNodeAccountIDs(env.NodeAccountIDs).
			AddTokenID(*token).
			Execute(env.Client)
		if err != nil {
			return err
		}

		_, err = dissociateTx.SetValidateStatus(true).GetReceipt(env.Client)
		if err != nil {
			return err
		}
	}

	return env.Client.Close()
}

func _NewMockClient() (*Client, error) {
	privateKey, err := PrivateKeyFromString(mockPrivateKey)

	if err != nil {
		return nil, err
	}

	var net = make(map[string]AccountID)
	net["nonexistent-testnet:56747"] = AccountID{Account: 3}

	client := ClientForNetwork(net)
	defaultNetwork := []string{"nonexistent-mirror-testnet:443"}
	client.SetMirrorNetwork(defaultNetwork)
	client.SetOperator(AccountID{Account: 2}, privateKey)

	return client, nil
}

func _NewMockTransaction() (*TransferTransaction, error) {
	privateKey, err := PrivateKeyFromString(mockPrivateKey)
	if err != nil {
		return &TransferTransaction{}, err
	}

	client, err := _NewMockClient()
	if err != nil {
		return &TransferTransaction{}, err
	}

	tx, err := NewTransferTransaction().
		AddHbarTransfer(AccountID{Account: 2}, HbarFromTinybar(-100)).
		AddHbarTransfer(AccountID{Account: 3}, HbarFromTinybar(100)).
		SetTransactionID(testTransactionID).
		SetNodeAccountIDs([]AccountID{{0, 0, 4, nil, nil, nil}}).
		FreezeWith(client)
	if err != nil {
		return &TransferTransaction{}, err
	}

	tx.Sign(privateKey)

	return tx, nil
}

type TokenCreateTransactionCustomizer func(transaction *TokenCreateTransaction)

var mintMetadata = [][]byte{{1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}}
var initialMetadata = []byte{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}

func createNft(env *IntegrationTestEnv, opts ...TokenCreateTransactionCustomizer) (TokenID, error) {
	tokenCreate := NewTokenCreateTransaction().
		SetTokenName("Example Collection").
		SetTokenSymbol("ABC").
		SetTokenType(TokenTypeNonFungibleUnique).
		SetDecimals(0).
		SetInitialSupply(0).
		SetMaxSupply(10).
		SetTreasuryAccountID(env.Client.GetOperatorAccountID()).
		SetSupplyType(TokenSupplyTypeFinite).
		SetAdminKey(env.Client.GetOperatorPublicKey()).
		SetFreezeKey(env.Client.GetOperatorPublicKey()).
		SetPauseKey(env.Client.GetOperatorPublicKey()).
		SetWipeKey(env.Client.GetOperatorPublicKey()).
		SetFeeScheduleKey(env.Client.GetOperatorPublicKey()).
		SetSupplyKey(env.Client.GetOperatorPublicKey()).
		SetMetadataKey(env.Client.GetOperatorPublicKey())

	for _, opt := range opts {
		opt(tokenCreate)
	}

	tokenCreateExec, err := tokenCreate.Execute(env.Client)
	if err != nil {
		return TokenID{}, err
	}

	receipt, err := tokenCreateExec.SetValidateStatus(true).GetReceipt(env.Client)
	if err != nil {
		return TokenID{}, err
	}
	return *receipt.TokenID, err
}

func createFungibleToken(env *IntegrationTestEnv, opts ...TokenCreateTransactionCustomizer) (TokenID, error) {
	tokenCreate := NewTokenCreateTransaction().
		SetNodeAccountIDs(env.NodeAccountIDs).
		SetTokenName("ffff").
		SetTokenSymbol("F").
		SetTokenMemo("asdf").
		SetDecimals(18).
		SetInitialSupply(1_000_000).
		SetTreasuryAccountID(env.Client.GetOperatorAccountID()).
		SetAdminKey(env.Client.GetOperatorPublicKey()).
		SetFreezeKey(env.Client.GetOperatorPublicKey()).
		SetPauseKey(env.Client.GetOperatorPublicKey()).
		SetWipeKey(env.Client.GetOperatorPublicKey()).
		SetFeeScheduleKey(env.Client.GetOperatorPublicKey()).
		SetMetadataKey(env.Client.GetOperatorPublicKey()).
		SetSupplyKey(env.Client.GetOperatorPublicKey()).
		SetFreezeDefault(false)

	for _, opt := range opts {
		opt(tokenCreate)
	}

	tokenCreateExec, err := tokenCreate.Execute(env.Client)
	if err != nil {
		return TokenID{}, err
	}

	receipt, err := tokenCreateExec.SetValidateStatus(true).GetReceipt(env.Client)
	if err != nil {
		return TokenID{}, err
	}
	return *receipt.TokenID, err
}

type AccountCreateTransactionCustomizer func(transaction *AccountCreateTransaction)

func createAccount(env *IntegrationTestEnv, opts ...AccountCreateTransactionCustomizer) (AccountID, PrivateKey, error) {
	newKey, err := PrivateKeyGenerateEd25519()

	if err != nil {
		return AccountID{}, PrivateKey{}, err
	}

	accountCreate := NewAccountCreateTransaction().
		SetKeyWithoutAlias(newKey).
		SetNodeAccountIDs(env.NodeAccountIDs).
		SetInitialBalance(NewHbar(1))

	for _, opt := range opts {
		opt(accountCreate)
	}

	accountCreateExec, err := accountCreate.Execute(env.Client)
	if err != nil {
		return AccountID{}, PrivateKey{}, err
	}

	receipt, err := accountCreateExec.SetValidateStatus(true).GetReceipt(env.Client)

	if err != nil {
		return AccountID{}, PrivateKey{}, err
	}

	return *receipt.AccountID, newKey, err
}

var LARGE_SMART_CONTRACT_BYTECODE = "60806040526040518060400160405280600581526020017f68656c6c6f0000000000000000000000000000000000000000000000000000008152505f90816100479190610293565b50348015610053575f80fd5b50610362565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806100d457607f821691505b6020821081036100e7576100e6610090565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026101497fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261010e565b610153868361010e565b95508019841693508086168417925050509392505050565b5f819050919050565b5f819050919050565b5f61019761019261018d8461016b565b610174565b61016b565b9050919050565b5f819050919050565b6101b08361017d565b6101c46101bc8261019e565b84845461011a565b825550505050565b5f90565b6101d86101cc565b6101e38184846101a7565b505050565b5b81811015610206576101fb5f826101d0565b6001810190506101e9565b5050565b601f82111561024b5761021c816100ed565b610225846100ff565b81016020851015610234578190505b610248610240856100ff565b8301826101e8565b50505b505050565b5f82821c905092915050565b5f61026b5f1984600802610250565b1980831691505092915050565b5f610283838361025c565b9150826002028217905092915050565b61029c82610059565b67ffffffffffffffff8111156102b5576102b4610063565b5b6102bf82546100bd565b6102ca82828561020a565b5f60209050601f8311600181146102fb575f84156102e9578287015190505b6102f38582610278565b86555061035a565b601f198416610309866100ed565b5f5b828110156103305784890151825560018201915060208501945060208101905061030b565b8683101561034d5784890151610349601f89168261025c565b8355505b6001600288020188555050505b505050505050565b6113678061036f5f395ff3fe608060405234801561000f575f80fd5b50600436106100f3575f3560e01c80636a4b285811610095578063ce6d41de11610064578063ce6d41de14610281578063e2842d791461029f578063f8b2cb4f146102bd578063fb1669ca146102ed576100f3565b80636a4b2858146101e75780638ada066e14610217578063b633941814610235578063cc56def314610251576100f3565b8063193170f9116100d1578063193170f9146101615780631e2aea0614610191578063368b8772146101c15780635b34b966146101dd576100f3565b80630d16c07e146100f75780630eb47c591461011557806315bcc96614610131575b5f80fd5b6100ff610309565b60405161010c919061093b565b60405180910390f35b61012f600480360381019061012a9190610ad2565b61035f565b005b61014b60048036038101906101469190610b2c565b610382565b6040516101589190610b66565b60405180910390f35b61017b60048036038101906101769190610b2c565b6103b6565b6040516101889190610b66565b60405180910390f35b6101ab60048036038101906101a69190610c43565b610437565b6040516101b89190610b66565b60405180910390f35b6101db60048036038101906101d69190610c8a565b610486565b005b6101e56104cf565b005b61020160048036038101906101fc9190610b2c565b6104e8565b60405161020e9190610d31565b60405180910390f35b61021f610589565b60405161022c9190610b66565b60405180910390f35b61024f600480360381019061024a9190610b2c565b610592565b005b61026b60048036038101906102669190610d51565b6105f2565b6040516102789190610b66565b60405180910390f35b610289610628565b6040516102969190610d31565b60405180910390f35b6102a76106b7565b6040516102b49190610e76565b60405180910390f35b6102d760048036038101906102d29190610ec0565b610742565b6040516102e49190610b66565b60405180910390f35b61030760048036038101906103029190610b2c565b610788565b005b6060600480548060200260200160405190810160405280929190818152602001828054801561035557602002820191905f5260205f20905b815481526020019060010190808311610341575b5050505050905090565b8060055f8481526020019081526020015f20908161037d91906110e5565b505050565b5f805f90505f5b838110156103ac57808261039d91906111e1565b91508080600101915050610389565b5080915050919050565b5f808210156103fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103f19061125e565b60405180910390fd5b5f600190505f600190505b83811161042d578082610418919061127c565b91508080610425906112bd565b915050610405565b5080915050919050565b5f805f90505f5b835181101561047c5783818151811061045a57610459611304565b5b60200260200101518261046d91906111e1565b9150808060010191505061043e565b5080915050919050565b805f908161049491906110e5565b507f8fae638bf5c6396194a6bb16601c4035a07fa48191638ff4102f0d96f14cfefb816040516104c49190610d31565b60405180910390a150565b60015f8154809291906104e1906112bd565b9190505550565b606060055f8381526020019081526020015f20805461050690610f18565b80601f016020809104026020016040519081016040528092919081815260200182805461053290610f18565b801561057d5780601f106105545761010080835404028352916020019161057d565b820191905f5260205f20905b81548152906001019060200180831161056057829003601f168201915b50505050509050919050565b5f600154905090565b600481908060018154018082558091505060019003905f5260205f20015f90919091909150557f3564ffb2fd8f93d7b0e9d1173ffdff5ee9775d860bfe82eaca0d0dbe07c8b634816040516105e79190610b66565b60405180910390a150565b5f80600190505f5b8381101561061d57848261060e919061127c565b915080806001019150506105fa565b508091505092915050565b60605f805461063690610f18565b80601f016020809104026020016040519081016040528092919081815260200182805461066290610f18565b80156106ad5780601f10610684576101008083540402835291602001916106ad565b820191905f5260205f20905b81548152906001019060200180831161069057829003601f168201915b5050505050905090565b6060600380548060200260200160405190810160405280929190818152602001828054801561073857602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106ef575b5050505050905090565b5f60025f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b8060025f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550600333908060018154018082558091505060019003905f5260205f20015f9091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f8ad64a0ac7700dd8425ab0499f107cb6e2cd1581d803c5b8c1c79dcb8190b1af826040516108709190610b66565b60405180910390a250565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f819050919050565b6108b6816108a4565b82525050565b5f6108c783836108ad565b60208301905092915050565b5f602082019050919050565b5f6108e98261087b565b6108f38185610885565b93506108fe83610895565b805f5b8381101561092e57815161091588826108bc565b9750610920836108d3565b925050600181019050610901565b5085935050505092915050565b5f6020820190508181035f83015261095381846108df565b905092915050565b5f604051905090565b5f80fd5b5f80fd5b610975816108a4565b811461097f575f80fd5b50565b5f813590506109908161096c565b92915050565b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6109e48261099e565b810181811067ffffffffffffffff82111715610a0357610a026109ae565b5b80604052505050565b5f610a1561095b565b9050610a2182826109db565b919050565b5f67ffffffffffffffff821115610a4057610a3f6109ae565b5b610a498261099e565b9050602081019050919050565b828183375f83830152505050565b5f610a76610a7184610a26565b610a0c565b905082815260208101848484011115610a9257610a9161099a565b5b610a9d848285610a56565b509392505050565b5f82601f830112610ab957610ab8610996565b5b8135610ac9848260208601610a64565b91505092915050565b5f8060408385031215610ae857610ae7610964565b5b5f610af585828601610982565b925050602083013567ffffffffffffffff811115610b1657610b15610968565b5b610b2285828601610aa5565b9150509250929050565b5f60208284031215610b4157610b40610964565b5b5f610b4e84828501610982565b91505092915050565b610b60816108a4565b82525050565b5f602082019050610b795f830184610b57565b92915050565b5f67ffffffffffffffff821115610b9957610b986109ae565b5b602082029050602081019050919050565b5f80fd5b5f610bc0610bbb84610b7f565b610a0c565b90508083825260208201905060208402830185811115610be357610be2610baa565b5b835b81811015610c0c5780610bf88882610982565b845260208401935050602081019050610be5565b5050509392505050565b5f82601f830112610c2a57610c29610996565b5b8135610c3a848260208601610bae565b91505092915050565b5f60208284031215610c5857610c57610964565b5b5f82013567ffffffffffffffff811115610c7557610c74610968565b5b610c8184828501610c16565b91505092915050565b5f60208284031215610c9f57610c9e610964565b5b5f82013567ffffffffffffffff811115610cbc57610cbb610968565b5b610cc884828501610aa5565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f610d0382610cd1565b610d0d8185610cdb565b9350610d1d818560208601610ceb565b610d268161099e565b840191505092915050565b5f6020820190508181035f830152610d498184610cf9565b905092915050565b5f8060408385031215610d6757610d66610964565b5b5f610d7485828601610982565b9250506020610d8585828601610982565b9150509250929050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610de182610db8565b9050919050565b610df181610dd7565b82525050565b5f610e028383610de8565b60208301905092915050565b5f602082019050919050565b5f610e2482610d8f565b610e2e8185610d99565b9350610e3983610da9565b805f5b83811015610e69578151610e508882610df7565b9750610e5b83610e0e565b925050600181019050610e3c565b5085935050505092915050565b5f6020820190508181035f830152610e8e8184610e1a565b905092915050565b610e9f81610dd7565b8114610ea9575f80fd5b50565b5f81359050610eba81610e96565b92915050565b5f60208284031215610ed557610ed4610964565b5b5f610ee284828501610eac565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680610f2f57607f821691505b602082108103610f4257610f41610eeb565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f60088302610fa47fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610f69565b610fae8683610f69565b95508019841693508086168417925050509392505050565b5f819050919050565b5f610fe9610fe4610fdf846108a4565b610fc6565b6108a4565b9050919050565b5f819050919050565b61100283610fcf565b61101661100e82610ff0565b848454610f75565b825550505050565b5f90565b61102a61101e565b611035818484610ff9565b505050565b5b818110156110585761104d5f82611022565b60018101905061103b565b5050565b601f82111561109d5761106e81610f48565b61107784610f5a565b81016020851015611086578190505b61109a61109285610f5a565b83018261103a565b50505b505050565b5f82821c905092915050565b5f6110bd5f19846008026110a2565b1980831691505092915050565b5f6110d583836110ae565b9150826002028217905092915050565b6110ee82610cd1565b67ffffffffffffffff811115611107576111066109ae565b5b6111118254610f18565b61111c82828561105c565b5f60209050601f83116001811461114d575f841561113b578287015190505b61114585826110ca565b8655506111ac565b601f19841661115b86610f48565b5f5b828110156111825784890151825560018201915060208501945060208101905061115d565b8683101561119f578489015161119b601f8916826110ae565b8355505b6001600288020188555050505b505050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f6111eb826108a4565b91506111f6836108a4565b925082820190508082111561120e5761120d6111b4565b5b92915050565b7f4e756d626572206d757374206265206e6f6e2d6e6567617469766500000000005f82015250565b5f611248601b83610cdb565b915061125382611214565b602082019050919050565b5f6020820190508181035f8301526112758161123c565b9050919050565b5f611286826108a4565b9150611291836108a4565b925082820261129f816108a4565b915082820484148315176112b6576112b56111b4565b5b5092915050565b5f6112c7826108a4565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036112f9576112f86111b4565b5b600182019050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffdfea2646970667358221220e5fc3a07831936d3b6e4bfebd7d653f5bed8d24ae30df912b0145f8cd28d76cd64736f6c634300081a0033"

var SIMPLE_SMART_CONTRACT_BYTECODE = "6080604052348015600e575f80fd5b50335f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506104a38061005b5f395ff3fe608060405260043610610033575f3560e01c8063607a4427146100375780637065cb4814610053578063893d20e81461007b575b5f80fd5b610051600480360381019061004c919061033c565b6100a5565b005b34801561005e575f80fd5b50610079600480360381019061007491906103a2565b610215565b005b348015610086575f80fd5b5061008f6102b7565b60405161009c91906103dc565b60405180910390f35b3373ffffffffffffffffffffffffffffffffffffffff165f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146100fb575f80fd5b805f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600181908060018154018082558091505060019003905f5260205f20015f9091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505f8173ffffffffffffffffffffffffffffffffffffffff166108fc3490811502906040515f60405180830381858888f19350505050905080610211576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102089061044f565b60405180910390fd5b5050565b805f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600181908060018154018082558091505060019003905f5260205f20015f9091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61030b826102e2565b9050919050565b61031b81610301565b8114610325575f80fd5b50565b5f8135905061033681610312565b92915050565b5f60208284031215610351576103506102de565b5b5f61035e84828501610328565b91505092915050565b5f610371826102e2565b9050919050565b61038181610367565b811461038b575f80fd5b50565b5f8135905061039c81610378565b92915050565b5f602082840312156103b7576103b66102de565b5b5f6103c48482850161038e565b91505092915050565b6103d681610367565b82525050565b5f6020820190506103ef5f8301846103cd565b92915050565b5f82825260208201905092915050565b7f5472616e73666572206661696c656400000000000000000000000000000000005f82015250565b5f610439600f836103f5565b915061044482610405565b602082019050919050565b5f6020820190508181035f8301526104668161042d565b905091905056fea26469706673582212206c46ddb2acdbcc4290e15be83eb90cd0b2ce5bd82b9bfe58a0709c5aec96305564736f6c634300081a0033"

var ETHEREUM_SMART_CONTRACT_BYTECODE = "608060405234801561001057600080fd5b506040516104d73803806104d78339818101604052602081101561003357600080fd5b810190808051604051939291908464010000000082111561005357600080fd5b90830190602082018581111561006857600080fd5b825164010000000081118282018810171561008257600080fd5b82525081516020918201929091019080838360005b838110156100af578181015183820152602001610097565b50505050905090810190601f1680156100dc5780820380516001836020036101000a031916815260200191505b506040525050600080546001600160a01b0319163317905550805161010890600190602084019061010f565b50506101aa565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061015057805160ff191683800117855561017d565b8280016001018555821561017d579182015b8281111561017d578251825591602001919060010190610162565b5061018992915061018d565b5090565b6101a791905b808211156101895760008155600101610193565b90565b61031e806101b96000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063368b87721461004657806341c0e1b5146100ee578063ce6d41de146100f6575b600080fd5b6100ec6004803603602081101561005c57600080fd5b81019060208101813564010000000081111561007757600080fd5b82018360208201111561008957600080fd5b803590602001918460018302840111640100000000831117156100ab57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610173945050505050565b005b6100ec6101a2565b6100fe6101ba565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610138578181015183820152602001610120565b50505050905090810190601f1680156101655780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6000546001600160a01b0316331461018a5761019f565b805161019d906001906020840190610250565b505b50565b6000546001600160a01b03163314156101b85733ff5b565b60018054604080516020601f600260001961010087891615020190951694909404938401819004810282018101909252828152606093909290918301828280156102455780601f1061021a57610100808354040283529160200191610245565b820191906000526020600020905b81548152906001019060200180831161022857829003601f168201915b505050505090505b90565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061029157805160ff19168380011785556102be565b828001600101855582156102be579182015b828111156102be5782518255916020019190600101906102a3565b506102ca9291506102ce565b5090565b61024d91905b808211156102ca57600081556001016102d456fea264697066735822122084964d4c3f6bc912a9d20e14e449721012d625aa3c8a12de41ae5519752fc89064736f6c63430006000033"
